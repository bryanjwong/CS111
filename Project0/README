Name: Bryan Wong
Email: bryanjwong@g.ucla.edu
ID: 805111517

Included Files:

  1) lab0.c
  =========
  C program that copies standard input to standard output by using the read()
  and write() system calls, exiting with return code 0 on successful operation.
  The program simultaneously reads a single char, then writes that char.

  It also takes the following options:

    --input=filename      use the specified file as standard input by making it
                          the new fd0

    --output=filename     use the specified file as standard output by making it
                          the new fd1

    --segfault            force a segmentation fault by calling a subroutine
                          that tries to assign a value to a null char * pointer

    --catch               use signal() to register a SIGSEGV handler that
                          catches segfaults, logs an error message, and exits
                          with a return code of 4

  Here is a summary of exit codes:

    0     copy successful
    1     unrecognized argument
    2     unable to open input file
    3     unable to open output file
    4     caught and received SIGSEGV

  2) Makefile
  ===========
  The Makefile includes the following targets:

    lab0 (default)        compiles lab0.c into a gdb-enabled executable

    clean                 removes files generated by this Makefile

    dist                  generates the submission tar file

    check                 runs smoke test cases, outputting any failed cases to
                          stdout

    Here is a more detailed list of the smoke test cases:

      @./lab0 < inputfile > outputfile1                 copying stdin to stdout
      @./lab0 --input=inputfile > outputfile2           copying file to stdout
      @./lab0 --output=outputfile3 < inputfile          copying stdin to file
      @./lab0 --input=inputfile --output=outputfile4    copying file to file
      @-./lab0 --blah               invalid option results in exit code 1
      @-./lab0 --input=             invalid input results in exit code 2
      @-./lab0 --output=            invalid output results in exit code 3
      @-./lab0 --input= --output=   invalid input, then invalid output results
                                      in exit code 2
      @-./lab0 --output= --input=   invalid output, then invalid input results
                                      in exit code 3
      @-./lab0 --segfault --catch   catching segfault results in exit code 4

  3) backtrace.png
  ================
  Includes a screen snapshot of running gdb on `./lab0 --segfault`, and getting
  a stack backtrace. In lab0.c, a segfault is caused in the segfault()
  subroutine called in main(), which is reflected in the backtrace.

  4) breakpoint.png
  =================
  Includes a screen snapshot of running gdb on `./lab0 --segfault` with a
  breakpoint at the line the null pointer is assigned. The print command (p) is
  used on this pointer to show that is indeed a null pointer (pointing to
  address 0x0)

Here are some sources I researched to write lab0.c and the Makefile:
  man7.org (C library reference)
  gnu.org (Makefile reference)
